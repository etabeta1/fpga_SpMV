-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SpMV is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    values_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    values_ce0 : OUT STD_LOGIC;
    values_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    columnIndexes_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    columnIndexes_ce0 : OUT STD_LOGIC;
    columnIndexes_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    rowPointers_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    rowPointers_ce0 : OUT STD_LOGIC;
    rowPointers_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    rowPointers_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    rowPointers_ce1 : OUT STD_LOGIC;
    rowPointers_q1 : IN STD_LOGIC_VECTOR (8 downto 0);
    numOfRows : IN STD_LOGIC_VECTOR (4 downto 0);
    numOfCols : IN STD_LOGIC_VECTOR (4 downto 0);
    vector_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vector_ce0 : OUT STD_LOGIC;
    vector_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of SpMV is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "SpMV_SpMV,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.912000,HLS_SYN_LAT=1341,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=545,HLS_SYN_LUT=431,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln15_fu_138_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln15_reg_199 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln16_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_204 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_r_addr_reg_208 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_223 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal rowPointers_load_reg_228 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln19_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_233 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_SpMV_Pipeline_spmv_loop_internal_fu_109_ap_start : STD_LOGIC;
    signal grp_SpMV_Pipeline_spmv_loop_internal_fu_109_ap_done : STD_LOGIC;
    signal grp_SpMV_Pipeline_spmv_loop_internal_fu_109_ap_idle : STD_LOGIC;
    signal grp_SpMV_Pipeline_spmv_loop_internal_fu_109_ap_ready : STD_LOGIC;
    signal grp_SpMV_Pipeline_spmv_loop_internal_fu_109_values_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_SpMV_Pipeline_spmv_loop_internal_fu_109_values_ce0 : STD_LOGIC;
    signal grp_SpMV_Pipeline_spmv_loop_internal_fu_109_columnIndexes_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_SpMV_Pipeline_spmv_loop_internal_fu_109_columnIndexes_ce0 : STD_LOGIC;
    signal grp_SpMV_Pipeline_spmv_loop_internal_fu_109_vector_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SpMV_Pipeline_spmv_loop_internal_fu_109_vector_ce0 : STD_LOGIC;
    signal grp_SpMV_Pipeline_spmv_loop_internal_fu_109_add7_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SpMV_Pipeline_spmv_loop_internal_fu_109_add7_out_ap_vld : STD_LOGIC;
    signal grp_SpMV_Pipeline_spmv_loop_internal_fu_109_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln15_fu_144_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln15_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_i21_fu_159_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_56 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal output_r_we0_local : STD_LOGIC;
    signal output_r_d0_local : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_ce0_local : STD_LOGIC;
    signal output_r_address0_local : STD_LOGIC_VECTOR (3 downto 0);
    signal rowPointers_ce1_local : STD_LOGIC;
    signal rowPointers_ce0_local : STD_LOGIC;
    signal zext_ln15_1_fu_150_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component SpMV_SpMV_Pipeline_spmv_loop_internal IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        zext_ln19 : IN STD_LOGIC_VECTOR (8 downto 0);
        wide_trip_count : IN STD_LOGIC_VECTOR (8 downto 0);
        values_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        values_ce0 : OUT STD_LOGIC;
        values_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        columnIndexes_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        columnIndexes_ce0 : OUT STD_LOGIC;
        columnIndexes_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
        vector_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        vector_ce0 : OUT STD_LOGIC;
        vector_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        add7_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        add7_out_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_SpMV_Pipeline_spmv_loop_internal_fu_109 : component SpMV_SpMV_Pipeline_spmv_loop_internal
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_SpMV_Pipeline_spmv_loop_internal_fu_109_ap_start,
        ap_done => grp_SpMV_Pipeline_spmv_loop_internal_fu_109_ap_done,
        ap_idle => grp_SpMV_Pipeline_spmv_loop_internal_fu_109_ap_idle,
        ap_ready => grp_SpMV_Pipeline_spmv_loop_internal_fu_109_ap_ready,
        zext_ln19 => j_reg_223,
        wide_trip_count => rowPointers_load_reg_228,
        values_address0 => grp_SpMV_Pipeline_spmv_loop_internal_fu_109_values_address0,
        values_ce0 => grp_SpMV_Pipeline_spmv_loop_internal_fu_109_values_ce0,
        values_q0 => values_q0,
        columnIndexes_address0 => grp_SpMV_Pipeline_spmv_loop_internal_fu_109_columnIndexes_address0,
        columnIndexes_ce0 => grp_SpMV_Pipeline_spmv_loop_internal_fu_109_columnIndexes_ce0,
        columnIndexes_q0 => columnIndexes_q0,
        vector_address0 => grp_SpMV_Pipeline_spmv_loop_internal_fu_109_vector_address0,
        vector_ce0 => grp_SpMV_Pipeline_spmv_loop_internal_fu_109_vector_ce0,
        vector_q0 => vector_q0,
        add7_out => grp_SpMV_Pipeline_spmv_loop_internal_fu_109_add7_out,
        add7_out_ap_vld => grp_SpMV_Pipeline_spmv_loop_internal_fu_109_add7_out_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_SpMV_Pipeline_spmv_loop_internal_fu_109_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_SpMV_Pipeline_spmv_loop_internal_fu_109_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_SpMV_Pipeline_spmv_loop_internal_fu_109_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_SpMV_Pipeline_spmv_loop_internal_fu_109_ap_ready = ap_const_logic_1)) then 
                    grp_SpMV_Pipeline_spmv_loop_internal_fu_109_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_56 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_fu_56 <= add_ln15_reg_199;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln15_reg_199 <= add_ln15_fu_138_p2;
                icmp_ln16_reg_204 <= icmp_ln16_fu_154_p2;
                output_r_addr_reg_208 <= zext_ln15_fu_144_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln19_reg_233 <= icmp_ln19_fu_164_p2;
                j_reg_223 <= rowPointers_q1;
                rowPointers_load_reg_228 <= rowPointers_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln16_fu_154_p2, grp_SpMV_Pipeline_spmv_loop_internal_fu_109_ap_done, ap_CS_fsm_state4, icmp_ln15_fu_132_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln15_fu_132_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln16_fu_154_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln15_fu_132_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_SpMV_Pipeline_spmv_loop_internal_fu_109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln15_fu_138_p2 <= std_logic_vector(unsigned(i_fu_56) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_SpMV_Pipeline_spmv_loop_internal_fu_109_ap_done)
    begin
        if ((grp_SpMV_Pipeline_spmv_loop_internal_fu_109_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln15_fu_132_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln15_fu_132_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln15_fu_132_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln15_fu_132_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    columnIndexes_address0 <= grp_SpMV_Pipeline_spmv_loop_internal_fu_109_columnIndexes_address0;
    columnIndexes_ce0 <= grp_SpMV_Pipeline_spmv_loop_internal_fu_109_columnIndexes_ce0;
    conv_i21_fu_159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_fu_138_p2),64));
    grp_SpMV_Pipeline_spmv_loop_internal_fu_109_ap_start <= grp_SpMV_Pipeline_spmv_loop_internal_fu_109_ap_start_reg;
    icmp_ln15_fu_132_p2 <= "1" when (i_fu_56 = ap_const_lv4_A) else "0";
    icmp_ln16_fu_154_p2 <= "1" when (unsigned(zext_ln15_1_fu_150_p1) < unsigned(numOfRows)) else "0";
    icmp_ln19_fu_164_p2 <= "1" when (unsigned(rowPointers_q1) < unsigned(rowPointers_q0)) else "0";
    output_r_address0 <= output_r_address0_local;

    output_r_address0_local_assign_proc : process(ap_CS_fsm_state2, output_r_addr_reg_208, zext_ln15_fu_144_p1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_address0_local <= output_r_addr_reg_208;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_r_address0_local <= zext_ln15_fu_144_p1(4 - 1 downto 0);
        else 
            output_r_address0_local <= "XXXX";
        end if; 
    end process;

    output_r_ce0 <= output_r_ce0_local;

    output_r_ce0_local_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_r_ce0_local <= ap_const_logic_1;
        else 
            output_r_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= output_r_d0_local;

    output_r_d0_local_assign_proc : process(ap_CS_fsm_state2, grp_SpMV_Pipeline_spmv_loop_internal_fu_109_add7_out, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_d0_local <= grp_SpMV_Pipeline_spmv_loop_internal_fu_109_add7_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_r_d0_local <= ap_const_lv32_0;
        else 
            output_r_d0_local <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    output_r_we0 <= output_r_we0_local;

    output_r_we0_local_assign_proc : process(ap_CS_fsm_state2, icmp_ln16_fu_154_p2, icmp_ln16_reg_204, icmp_ln19_reg_233, icmp_ln15_fu_132_p2, ap_CS_fsm_state5)
    begin
        if ((((icmp_ln19_reg_233 = ap_const_lv1_1) and (icmp_ln16_reg_204 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln16_fu_154_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln15_fu_132_p2 = ap_const_lv1_0)))) then 
            output_r_we0_local <= ap_const_logic_1;
        else 
            output_r_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    rowPointers_address0 <= conv_i21_fu_159_p1(4 - 1 downto 0);
    rowPointers_address1 <= zext_ln15_fu_144_p1(4 - 1 downto 0);
    rowPointers_ce0 <= rowPointers_ce0_local;

    rowPointers_ce0_local_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rowPointers_ce0_local <= ap_const_logic_1;
        else 
            rowPointers_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    rowPointers_ce1 <= rowPointers_ce1_local;

    rowPointers_ce1_local_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rowPointers_ce1_local <= ap_const_logic_1;
        else 
            rowPointers_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    values_address0 <= grp_SpMV_Pipeline_spmv_loop_internal_fu_109_values_address0;
    values_ce0 <= grp_SpMV_Pipeline_spmv_loop_internal_fu_109_values_ce0;
    vector_address0 <= grp_SpMV_Pipeline_spmv_loop_internal_fu_109_vector_address0;
    vector_ce0 <= grp_SpMV_Pipeline_spmv_loop_internal_fu_109_vector_ce0;
    zext_ln15_1_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_56),5));
    zext_ln15_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_56),64));
end behav;
